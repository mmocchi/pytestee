name: Create Version Tag

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@38f3f104447c67c051c4a08e39b64a148898af3a # v4.2.0

      - name: Install Task
        uses: arduino/setup-task@b91d5d2c96a56797b48ac1e0e89220bf64044611 # v2.0.0
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: uv sync --dev

      - name: Get version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Check if tag exists
        id: check_tag
        run: |
          if git rev-parse "v${{ steps.get_version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Tag v${{ steps.get_version.outputs.version }} already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Tag v${{ steps.get_version.outputs.version }} does not exist"
          fi

      - name: Check if version exists on TestPyPI
        id: check_testpypi
        continue-on-error: true
        run: |
          response=$(curl -s -w "%{http_code}" -o /dev/null "https://test.pypi.org/pypi/pytestee/${{ steps.get_version.outputs.version }}/")
          if [ "$response" = "200" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Version ${{ steps.get_version.outputs.version }} exists on TestPyPI"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Version ${{ steps.get_version.outputs.version }} does not exist on TestPyPI"
          fi

      - name: Exit if version already exists
        if: steps.check_tag.outputs.exists == 'true' || steps.check_testpypi.outputs.exists == 'true'
        run: |
          echo "Version ${{ steps.get_version.outputs.version }} already exists as a tag or on TestPyPI"
          exit 1

      - name: Run tests and checks
        run: |
          task check

      - name: Create tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${{ steps.get_version.outputs.version }}" -m "Release version ${{ steps.get_version.outputs.version }}"
          git push origin "v${{ steps.get_version.outputs.version }}"

      - name: Build package
        run: uv build

      - name: Upload build artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: python-package-distributions
          path: dist/
          retention-days: 30

      - name: Upload to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          verbose: true

      - name: Create GitHub Release Draft
        run: |
          gh release create "v${{ steps.get_version.outputs.version }}" \
            --title "Release v${{ steps.get_version.outputs.version }}" \
            --draft \
            --notes "$(cat <<'EOF'
          ## Changes in v${{ steps.get_version.outputs.version }}
          
          <!-- Add release notes here before publishing -->
          
          ## Installation
          
          \`\`\`bash
          pip install pytestee==${{ steps.get_version.outputs.version }}
          \`\`\`
          
          ## Full Changelog
          
          See the [commit history](https://github.com/${{ github.repository }}/compare/v${{ steps.get_version.outputs.version }}) for detailed changes.
          EOF
          )" \
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
